#!/bin/bash
set -euo pipefail

DIR=$(cd "$(dirname "$0")/.." && pwd)

CONF=$DIR/conf/config.yml

log () { echo -e "\e[33m\e[1m[·] $*\e[0m" ; }
# WARNING this function evaluates raw string vv
warn () { echo -e "\e[31m\e[1m[·] $*\e[0m"; "$@" ; }

replace_vars () {
        var=$(echo "$1" | grep -o '{{ .* }}')
        if [ -n "$var" ] ; then
            value=$(yq -cr ".$(echo "$var" | sed 's/[{ }]//g')" "$CONF")
            # NOTE why isn't it working?
            # replace_vars "${1//$var/$value}"
            echo $(replace_vars "${1//$var/$value}")
        else
            echo "$1"
        fi
    }


## LOCAL

deploy_local () { vagrant up --provision ; }
destroy_local () { warn vagrant destroy ; }


## AWS

deploy_aws () {
    terraform apply
    ip=$(terraform output -no-color | grep -Eo '[0-9]+\.[0-9\.]+')
    hostname=$(yq -r '.hostname' "$CONF")

    ansible () {
        ANSIBLE_HOST_KEY_CHECKING=False ansible-playbook -e "inventory_hostname=$hostname" -u arch -i "$ip," --key-file ~/aws.pem "$DIR/playbooks/$1".yml
    }

    if [ -n "$playbooks" ]; then
        # run only specified playbooks
        for playbook in $playbooks; do
            ansible "$playbook"
        done
    else
        # run all playbooks
        ansible default
        ansible router
        ansible cloud
        ansible torrent
        ansible debug
    fi
}

destroy_aws () {
    warn terraform destroy
}


## PROD

deploy_prod () {
    # config file is a list of (url, ip, modules) tuples
    # prod:
    #   - url: domain.tld
    #     ip: 12.34.56.78
    #     modules:
    #       - a
    #       - b

    if [ -n "$playbooks" ]; then
        echo "passing specific playbooks to prod isn't allowed"
        echo "just use './manage deploy prod'"
        exit 1
    fi


    main_user=$(yq -cr '.main_user' "$CONF")
    ansible () {
        ansible-playbook -u "$main_user" -e "hostname=$1" -i "$2," "$DIR/playbooks/$3".yml
    }

    yq -cr '.prod[]' "$CONF" | while read -r host; do
        url=$(yq -cr '.url' <<< "$host")
        url=$(replace_vars "$url")

        ip=$(yq -cr '.ip' <<< "$host")

        # at first, deploy 'default' playbook
        ansible "$url" "$ip" default

        modules=$(yq -cr 'select(.modules) | .modules[]' <<< "$host")
        test -n "$modules" && echo "$modules" | while read -r module; do
            ansible "$url" "$ip" "$module"
        done
    done
}

destroy_prod () { echo "4B0RT 4ND K1LL" ; echo "sudo rm -rf /" ; }


## MAIN

help () {
    echo "$0 help:"
    echo -e "    deploy"
    echo -e "      local  deploy on localhost using vagrant and libvirt"
    echo -e "      aws    deploy on aws using terraform and set cname on gandi"
    echo -e "      prod   deploy on production"
    echo -e "    destroy  local | aws | prod | all"
    echo -e "    ssh      local | aws | prod"
}

if [ "$#" -lt 2 ]; then
    help
    exit
fi

action=$1
env=$2
shift
shift
playbooks=$*


case "$action" in
    deploy)
        case "$env" in
            local) deploy_local ;;
            aws)   deploy_aws ;;
            prod)  deploy_prod ;;
            *)     help ;;
        esac
        ;;
    destroy)
        set +e
        case "$env" in
            local) destroy_local ;;
            aws)   destroy_aws ;;
            prod)  destroy_prod ;;
            all)   destroy_local; destroy_aws; destroy_prod ;;
            *)     help ;;
        esac
        ;;
    ssh)
        case "$env" in
            local) vagrant ssh ;;
            aws)   ssh -i ~/aws.pem "arch@$(terraform output -no-color | grep -Eo '[0-9]+\.[0-9\.]+')" ;;
            prod)  ssh "$(yq -r '.main_user' "$CONF")@$(yq -r '.hostname' "$CONF")" ;;
            *)     help ;;
        esac
        ;;
    *) help ;;
esac

# vim: ts=4 sw=4 et:
