- hosts: all
  become: yes
  vars_files:
    - ../conf/config.yml

  tasks:
    - name: Start reverse-proxy
      community.docker.docker_container:
        name: reverseproxy
        image: traefik
        restart_policy: unless-stopped
        healthcheck:
          test: traefik healthcheck --ping
        command:
          - --log.level=INFO
          - --api.dashboard=true
          - --ping=true
          # API is on port 8080 which is only available on localhost
          - --api.insecure=true
          - --providers.docker=true
          - --providers.docker.exposedbydefault=false
          - --providers.providersthrottleduration=10s

          - --entrypoints.web.address=:80
          - --entrypoints.websecure.address=:443
          - --entrypoints.web.http.redirections.entrypoint.to=websecure
          - --entrypoints.web.http.redirections.entryPoint.scheme=https
          - --entrypoints.websecure.http.tls=true
          - --entrypoints.websecure.http.tls.certResolver=myresolver

          - --certificatesresolvers.myresolver.acme.email={{ main_user }}@{{ hostname }}
          ### DEBUG
          # - --certificatesresolvers.myresolver.acme.caserver=https://acme-staging-v02.api.letsencrypt.org/directory
          - --certificatesresolvers.myresolver.acme.tlschallenge=true
          - --certificatesresolvers.myresolver.acme.httpchallenge=true
          - --certificatesresolvers.myresolver.acme.httpchallenge.entrypoint=web

        labels:
          traefik.enable: "false"
          # For later, when the VPN will get deployed
          # traefik.http.routers.reverseproxy.tls: "false"
          # traefik.http.routers.reverseproxy.rule: Host(`traefik.{{ hostname }}`) && (PathPrefix(`/api`) || PathPrefix(`/dashboard`))
          # traefik.http.routers.reverseproxy.service: api@internal
          # traefik.http.routers.reverseproxy.middlewares: local-network@docker
          traefik.http.middlewares.local-network.ipwhitelist.sourcerange: 10.0.0.0/8,172.16.0.0/12,192.168.0.0/16

        volumes:
          - /var/run/docker.sock:/var/run/docker.sock:ro
        published_ports:
          - "80:80"
          - "443:443"
          - "127.0.0.1:8080:8080"

    - name: Start DNS provider
      community.docker.docker_container:
        name: dns
        image: pihole/pihole:latest
        restart_policy: unless-stopped
        env:
          TZ: Europe/Paris
          WEBPASSWORD: "{{ dns_password }}"
          DNSMASQ_LISTENING: all
        ports:
          - "53:53/tcp"
          - "53:53/udp"
          - "127.0.0.1:8081:80/tcp"
        volumes:
          - /mnt/dns/etc-pihole:/etc/pihole
          - /mnt/dns/etc-dnsmasq.d:/etc/dnsmasq.d
        labels:
          traefik.enable: "false"
          # For later, when the VPN will get deployed
          # traefik.http.routers.dns.tls: "false"
          # traefik.http.routers.dns.rule: Host(`dns.{{ hostname }}`) && PathPrefix(`/admin`)
          # traefik.http.routers.dns.service: api@internal
          # traefik.http.routers.dns.middlewares: local-network@docker
